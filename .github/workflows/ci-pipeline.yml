---
name: GitHub Actions Demo
run-name: ${{ github.actor }} is testing out GitHub Actions ðŸš€
"on":
  push:
    branches:
      - practiceLecture
  pull_request:
    branches:
      - main

jobs:
  EditorConfig:
    name: This is the Editor Config job
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository code
        uses: actions/checkout@v4
      - run: echo "ðŸ’¡ The ${{ github.repository }} repository has been cloned to the runner."
      - uses: editorconfig-checker/action-editorconfig-checker@main
      - run: editorconfig-checker

  PylintJob:
    name: This is the PylintJob
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository code
        uses: actions/checkout@v4
      - run: echo "ðŸ’¡ The ${{ github.repository }} repository has been cloned to the runner."
      - uses: editorconfig-checker/action-editorconfig-checker@main
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.13"
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      - name: Check the code with pylint
        run: |
          cd app && pylint -d C0114,C0115,C0116 $(git ls-files '*.py')

  PythonBlack:
    name: Python Black job
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Python Black
        uses: psf/black@stable
        with:
          options: "--check --verbose"
          src: "./app"

  MarkdownLint:
    name: This is the Markdown Lint job
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Install Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "20"
      - name: Install markdownlint-cli
        run: npm install -g markdownlint-cli
      - name: Run markdownlint
        run: markdownlint README.md -c .markdownlint.json

  UnitTestSnyk:
    name: This is the Unit testing and snyk job
    runs-on: ubuntu-latest
    steps:
      - name: Unit Test for the Python application
        run: echo "This is the unit test for the Python application"
      - name: Checkout repo
        uses: actions/checkout@v4
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.13"
      - name: Install dependencies
        run: |
          pip3 install -r requirements.txt
      - name: Run the unit tests
        run: python3 -m unittest discover -s app -p "*.py"
      - name: Run Snyk to check for vulnerabilities
        uses: actions/checkout@master
      - name: Run Snyk to check for vulnerabilities
        uses: snyk/actions/python-3.10@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=critical
  ScanForSecrets:
    name: This is the gitLeaks check for the secrets
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 1
      - uses: gitleaks/gitleaks-action@v2

  SonarCloud:
    name: This is the SonarCloud check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout the repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
      - name: SonarCloud Scan
        uses: sonarsource/sonarcloud-github-action@v2.1.0
        with:
          projectBaseDir: ./app
          args: >
            -Dsonar.organization=klimentc
            -Dsonar.projectKey=KlimentC_devops-programme
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_CLOUD_TOKEN }}


  DockerBuildAndPush:
    name: This is the Docker process where it builds, scans with Trivy and pushes the image
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          push: false
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/my-docker-app:${{ github.sha }}

#     - name: Scan with Trivy
#       uses: aquasecurity/trivy-action@0.28.0
#       with:
#         image-ref: "${{ secrets.DOCKERHUB_USERNAME }}/my-docker-app:${{ github.sha }}"
#          format: "table"
#          exit-code: "1"
#          ignore-unfixed: true
#          vuln-type: "os,library"
#          severity: "CRITICAL,HIGH"

      - name: Push Docker image
        if: success()
        run: |
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/my-docker-app:${{ github.sha }}
